;// A = DPM
;
;// /INDENT = number of spaces to indent a line
;
@INIT,
IF{@Memory.store.file(/MH,/PATH) /PATH_" cannot be opened/edited!"^ERR;
   @COMPILE,
   @SAVE},
ERR;

INIT
0^/INDENT,
A^DPM^NPR.DPM.dpm.code^NPR.SEG.ele.dpm,
A#"0."^APP^NPR.APPL.mnemonic,
"C:\Data Definitions"^ROOT,
ROOT@Directory.create,
ROOT_"\"_APP@Directory.create,
ROOT_"\"_APP_"\"_DPM_".xml"^/PATH,
""^ROOT^APP^DPM,
@Memory.allocate("")^/MH

SAVE
IF{@Memory.store.file(/MH,/PATH) "Couldn't write data!"^ERR},
@Memory.free(/MH)

; #####################
; ##### Utilities #####
; #####################

#OPEN
;//Opens a tag.
" ":/INDENT@OUT,
@Add(2,/INDENT),
"<"_A_">"@OUT,
@EOL;

#CLOSE
;//Closes a tag.
@Sub(2,/INDENT),
" ":/INDENT@OUT,
"</"_A_">"@OUT,
@EOL;

#TAG
;//Opens a tag A, inserts its value B, and closes the tag.
;  @TAG(name,@NPR.ELE.name)
" ":/INDENT@OUT,
"<"_A_IF{B ">"_B_"</"_A_">";"/>"}_@EOL;

#MULTI.TAG
;//Opens a multi-line tag (A), loops on its segment ([B]) and inserts its values,
;  then closes.
" ":/INDENT@OUT,
"<"_A@OUT,
IF{+[B,""]_.=. "/>"@OUT;
   ">"@OUT,
   DO{+([B,X],Y)^X DO{Y @FIX(Y$50)@OUT,
                        Y'$50^Y},
   "</"_A_">"@OUT},
@EOL;

OUT
^@Memory.write(/MH)

EOL
D(13,10)@OUT

#FIX
D(34)_"'<>&"^CHARS,
`&quot;,&apos;,&lt;,&gt;,&amp;'^ESCAPE,
L(A)^X,
DO{X-1^X'<0 IF{L(CHARS,A#X)^Y=L(CHARS);(A$X)_(ESCAPE|Y)_(A%X)^A}},
A;

; #####################
; ## Compile Section ##
; #####################

COMPILE
@OPEN("segments"),
DO{@Next(NPR.SEG.name) @SEGMENT},
@CLOSE("segments")

; #####################
; ## Segment Section ##
; #####################

SEGMENT
@OPEN("segment"),
@TAG("name",NPR.SEG.name),
@TAG("physical",@FIX(@NPR.SEG.phy.base)),
@TAG("value",@FIX(@NPR.SEG.phy.val.ele)),
@SEGMENT.CHILDREN,
@SEGMENT.SUBSCRIPTS,
@SEGMENT.ELEMENTS,
@CLOSE("segment")

SEGMENT.CHILDREN
@OPEN("children"),
DO{@Next(NPR.SEG.child.segment) @TAG("child",NPR.SEG.child.segment)},
@CLOSE("children")

SEGMENT.SUBSCRIPTS
@OPEN("subscripts"),
DO{@Next(NPR.SEG.sub.urn) @TAG("subscript",@NPR.SEG.sub.element)},
@CLOSE("subscripts")

SEGMENT.ELEMENTS
@OPEN("elements"),
DO{@Next.get(NPR.SEG.sort.element,NPR.SEG.ele.name) @ELEMENT},
@CLOSE("elements")

; #####################
; ## Element Section ##
; #####################

ELEMENT
@OPEN("element"),
@TAG("name",NPR.SEG.ele.name),
@TAG("local",@NPR.SEG.ele.local),
@TAG("physical",@FIX(@NPR.SEG.ele.phy.address)),
@TAG("segment",@NPR.SEG.ele.seg),
@TAG("pointer",@NPR.SEG.ele.pointer),
@TAG("type",@NPR.SEG.ele.data.type),
@TAG("offset",@NPR.SEG.ele.offset),
@TAG("length",@NPR.SEG.ele.length),
@MULTI.TAG("attributes",^@NPR.SEG.ele.attributes),    ;//may need to be root
@MULTI.TAG("description",^@NPR.SEG.ele.description),    ;//may need to be root
@MULTI.TAG("documentation",^@NPR.SEG.ele.documentation),    ;//may need to be root
@CLOSE("element")