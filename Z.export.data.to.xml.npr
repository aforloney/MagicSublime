;// A = DPM
;
;// /INDENT = number of spaces to indent a line
;
@INIT,
IF{@Memory.store.file(/MH,/PATH) /PATH_" cannot be opened/edited!"^ERR;
   @COMPILE,
   @SAVE},
ERR;

INIT
0^/INDENT,
A^DPM^NPR.DPM.dpm.code^NPR.SEG.ele.dpm,
A#"0."^APP^NPR.APPL.mnemonic,
"C:\Data Definitions"^ROOT,
ROOT@Directory.create,
ROOT_"\"_APP@Directory.create,
ROOT_"\"_APP_"\"_DPM_".xml"^/PATH,
""^ROOT,
D(34)_"'<>&"^/CHARS,
{"&quot;","&apos;","&lt;","&gt;","&amp;"}^/ESCAPE,
@SETUP.BUFFERS,
@Memory.allocate("")^/MH

SETUP.BUFFERS
IF{O(/(.TS));@Est.t.rec(S,@Root(@NPR.SEG.main))},
IF{O(/(.TE));@Est.t.rec(E,@Root(@NPR.SEG.elements))}

SAVE
IF{@Memory.store.file(/MH,/PATH) "Couldn't write data!"^ERR},
@Memory.free(/MH)

; #####################
; ##### Utilities #####
; #####################

#OPEN
;//Opens a tag.
" ":/INDENT@OUT,
@Add(2,/INDENT),
"<"_A_">"@OUT,
@EOL@OUT;

#ATTRIBUTE
; A = name
; B = value
" "_A_"="_D(34)_B_D(34)@OUT;

#CLOSE
;//Closes a tag.
@Sub(2,/INDENT),
" ":/INDENT@OUT,
"</"_A_">"@OUT,
@EOL@OUT;

#TAG
; A = Name
; B = Value
B^VAL,
" ":/INDENT@OUT,
IF{'VAL "<"_A_"/>"@OUT;
   "<"_A_">"@OUT,
   @SEND.VALUE,
   "</"_A_">"@OUT},
@EOL@OUT,
END;

#MULTI.TAG
; A = Name
; B = Root of structure to loop on
" ":/INDENT@OUT,
IF{+[B,""]_.=. "<"_A_"/>"@OUT;
   "<"_A_">"@OUT,
   DO{+([B,C],VAL)^C @SEND.VALUE},
   "</"_A_">"@OUT},
@EOL@OUT;

SEND.VALUE
L(VAL)^Z,0^X,
DO{X<Z IF{L(/CHARS,VAL#X)^Y=L(/CHARS) VAL#X@OUT;
          /ESCAPE|Y@OUT},
          @Add(1,X)}

OUT
^@Memory.write(/MH)

EOL
D(13,10)

; #####################
; ## Compile Section ##
; #####################

COMPILE
@Add(2,/INDENT),
"<segments"@OUT,
@SETUP.METADATA,
">"@OUT,@EOL@OUT,
DO{@Next(NPR.SEG.name) @SEGMENT},
@CLOSE("segments")

SETUP.METADATA
IF{@.ring @ATTRIBUTE("ring",@.ring)},
IF{@NPR.APPL.release["NPR"] @ATTRIBUTE("release",@NPR.APPL.release["NPR"])},
IF{@.update.today @ATTRIBUTE("date",@.today)}

; #####################
; ## Segment Section ##
; #####################

SEGMENT
@OPEN("segment"),
@TAG("name",NPR.SEG.name),
@TAG("physical",@NPR.SEG.phy.base),
@TAG("value",@NPR.SEG.phy.val.ele),
@SEGMENT.CHILDREN,
@SEGMENT.SUBSCRIPTS,
@SEGMENT.ELEMENTS,
@CLOSE("segment")

SEGMENT.CHILDREN
@OPEN("children"),
DO{@Next(NPR.SEG.child.segment) @TAG("child",NPR.SEG.child.segment)},
@CLOSE("children")

SEGMENT.SUBSCRIPTS
@OPEN("subscripts"),
DO{@Next(NPR.SEG.sub.urn) @TAG("subscript",@NPR.SEG.sub.element)},
@CLOSE("subscripts")

SEGMENT.ELEMENTS
@OPEN("elements"),
DO{@Next.get(NPR.SEG.sort.element,NPR.SEG.ele.name) @ELEMENT},
@CLOSE("elements")

; #####################
; ## Element Section ##
; #####################

ELEMENT
@OPEN("element"),
@TAG("name",NPR.SEG.ele.name),
@TAG("local",@NPR.SEG.ele.local),
@TAG("physical",@NPR.SEG.ele.phy.address),
@TAG("segment",@NPR.SEG.ele.seg),
@TAG("pointer",@NPR.SEG.ele.pointer),
@TAG("type",@NPR.SEG.ele.data.type),
@TAG("offset",@NPR.SEG.ele.offset),
@TAG("length",@NPR.SEG.ele.length),
@COMPILE.ATTRIBUTES,@MULTI.TAG("attributes",^/ATTRIBUTES),
@MULTI.TAG("description",^@Root(@NPR.SEG.description)),
@MULTI.TAG("documentation",^@Root(@NPR.SEG.ele.tech.doc)),
@CLOSE("element")

COMPILE.ATTRIBUTES
K(/ATTRIBUTES),
""^Q^EOL,
; Don't send an EOL before the first, or after the last item.
DO{@Next.get(NPR.SEG.ele.attribute.index,Y)^X @Add(1,Q),
                                              EOL_X_"="^/ATTRIBUTES[Q],
                                              @Add(1,Q),
                                              Y^/ATTRIBUTES[Q],
                                              @EOL^EOL}
